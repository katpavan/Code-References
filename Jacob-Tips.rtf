{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red52\green56\blue63;\red237\green236\blue236;\red0\green0\blue0;
\red126\green129\blue138;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c26667\c28627\c31373;\cssrgb\c94510\c94118\c94118;\cssrgb\c0\c0\c0;
\cssrgb\c56471\c58039\c61176;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 How would you design tiny.url.com?\
\
Client/ Customer/ User Requirements:\
1. Given a URL --> shorter one\
  - www.amazon.com --> tiny.url.com/asf234\
2. Shorter --> regular URL\
	- tiny.url.com/asf234 --> www.amazon.com\
#3. Customizable --> "hello"\
  - tiny.url.com/asdasd/hello\
#4. Links expiring/ not expiring\
#5. Encryption/ Domain restrictions\
\
Technical Requirements:\
1. Reliable service/ doesn't go down\
2. Shorten URL that goes to correct long URL\
3. Metrics\
#4. REST API\
\
Costs:\
- TPS (Transactions per second)\
 -> $$$ vs. $$\
- Bandwidth\
 -> Speed of read/ write\
 -> Expected latency per transaction\
- Data\
 -> 1.5 petabytes ?\
\
Functional:\
- HashMapping/ using the customizable word\
 -> ip address of shortened url as key/ personal id/ w.e.\
 \
High Level Design:\
1. "Client" --> types in URL and submits to "Server"\
2. "Server" --> takes URL and passes it to "Encoder/ Decoder Service"\
3. "Encoder/Decoder Service" --> Performs encoding; Stores in "Database" or Decodes and reads from "Database"\
4. "Database" --> Returns original url/ shortened url to "Server"\
5. "Server" --> returns to "Client"\
\
\
\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
1. browser checks cache; if requested object is in cache and is fresh, skip to #9\
2. browser asks OS for server's IP address\
3. OS makes a DNS lookup and replies the IP address to the browser\
4. browser opens a TCP connection to server (this step is much more complex with HTTPS)\
5. browser sends the HTTP request through TCP connection\
6. browser receives HTTP response and may close the TCP connection, or reuse it for another request\
7. browser checks if the response is a redirect or a conditional response (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)\
8. if cacheable, response is stored in cache\
9. browser decodes response (e.g. if it's gzipped)\
10. browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)\
11. browser renders response, or offers a download dialog for unrecognized types\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \
\pard\pardeftab720\sl260\partightenfactor0

\fs22 \cf5 \
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf4 \cb6 Chat Conversation End\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\fs26 \cf5 \cb6 Type a message...\cb1 \
}